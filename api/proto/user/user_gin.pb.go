// Code generated by protoc-gen-gin. DO NOT EDIT.

package user

import (
	gin "github.com/gin-gonic/gin"
	http "net/http"
)

type UserHttpServer struct {
	server UserServer
	router gin.IRouter
}

func RegisterUserServerHTTPServer(srv UserServer, r gin.IRouter) {
	s := UserHttpServer{
		server: srv,
		router: r,
	}
	s.RegisterService()
}

func (s *UserHttpServer) Ping_0(c *gin.Context) {
	var in PingReq

	if err := c.ShouldBindQuery(&in); err != nil {
		// s.resp.ParamsError(ctx, err)
		return
	}

	out, err := s.server.Ping(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *UserHttpServer) Hello_0(c *gin.Context) {
	var in HelloReq

	if err := c.ShouldBindJSON(&in); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	out, err := s.server.Hello(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *UserHttpServer) Hehe_0(c *gin.Context) {
	var in HeheReq

	if err := c.ShouldBindQuery(&in); err != nil {
		// s.resp.ParamsError(ctx, err)
		return
	}

	out, err := s.server.Hehe(c, &in)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": err.Error()})
		return
	}

	c.JSON(http.StatusOK, out)
}

func (s *UserHttpServer) RegisterService() {

	s.router.Handle("GET", "/ping", s.Ping_0)

	s.router.Handle("POST", "/hello", s.Hello_0)

	s.router.Handle("GET", "/hehe", s.Hehe_0)

}
