package main

import (
	"bytes"
	"go/ast"
	"go/parser"
	"go/token"
	"html/template"
	"os"
	"strings"
)

var tpl = `
// Code generated by protoc-gen-gin. DO NOT EDIT.
package code

func init() {
	errMap = map[int]Merror{
	{{- range . }}
		{{ .Code }}: {code: {{ .Code }}, msg: "{{ .Msg }}"},
	{{- end }}
	}
}
`

type Merror struct {
	Code string
	Msg  string
}

func main() {
	fileName := "/Users/apple/GolandProjects/kwai/vars/code/user.go"
	f, err := parser.ParseFile(token.NewFileSet(), fileName, nil, parser.ParseComments)
	if err != nil {
		panic(err)
	}

	m := genDecl(f.Decls[0].(*ast.GenDecl))

	buf := new(bytes.Buffer)
	tmpl, err := template.New("http").Parse(strings.TrimSpace(tpl))
	if err != nil {
		panic(err)
	}

	if err := tmpl.Execute(buf, m); err != nil {
		panic(err)
	}

	file, err := os.OpenFile("./vars/code/code_gen.go", os.O_CREATE|os.O_WRONLY, 0644)
	defer file.Close()
	if err != nil {
		panic(err)
	}

	file.Write(buf.Bytes())
}

func genDecl(decl *ast.GenDecl) []*Merror {
	specs := decl.Specs
	res := make([]*Merror, len(specs))

	for i, spec := range specs {
		vs := spec.(*ast.ValueSpec)
		desc := vs.Names[0].Name
		docs := strings.Split(vs.Doc.Text(), "@message=")
		var msg string
		if len(docs) == 2 {
			msg = docs[1]
		}
		res[i] = &Merror{desc, strings.TrimSpace(msg)}
	}

	return res
}
